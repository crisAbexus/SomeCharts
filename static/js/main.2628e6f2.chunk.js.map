{"version":3,"sources":["D3Chart.js","ChartWrapper.js","GenderDropdown.js","App.js","serviceWorker.js","index.js"],"names":["url","MARGIN","WIDTH","HEIGHT","D3chart","element","vis","this","svg","d3","append","attr","xLabel","text","yLabel","xAxisGroup","yAxisGroup","Promise","all","then","datasets","menData","womenData","update","gender","data","y","domain","d","height","range","x","map","name","padding","xAxisCall","call","yAxisCall","transition","duration","rects","selectAll","exit","remove","bandwidth","enter","ChartWrapper","setState","chart","D3Chart","refs","nextProps","state","ref","Component","GenderDropdown","genderSelected","Dropdown","Toggle","variant","id","Menu","Item","onSelect","App","Navbar","bg","Brand","Container","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2628e6f2.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nconst url = 'https://udemy-react-d3.firebaseio.com'\nconst MARGIN = { TOP: 10, BOTOOM: 50, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 800 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTOOM;\n\nexport default class D3chart {\n  constructor(element) {\n    const vis = this\n\n    vis.svg = d3.select(element)\n      .append('svg')\n        .attr('width', WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n        .attr('height', HEIGHT + MARGIN.TOP + MARGIN.BOTOOM)\n      .append(\"g\")\n        .attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n    vis.xLabel = vis.svg.append('text')\n        .attr('x', WIDTH / 2)\n        .attr('y', HEIGHT + 50)\n        .attr('text-anchor', 'middle')\n      .text('The world\\'s tallest men')\n\n      vis.yLabel = vis.svg.append('text')\n        .attr('x', -(HEIGHT / 2))\n        .attr('y', -50)\n        .attr('text-anchor', 'middle')\n      .text('Height in cm')\n        .attr('transform', 'rotate(-90)')\n\n    vis.xAxisGroup = vis.svg.append('g')\n        .attr('transform', `translate(0, ${HEIGHT})`)\n\n\n    vis.yAxisGroup = vis.svg.append('g')\n\n    Promise.all([\n      d3.json(`${url}/tallest_men.json`),\n      d3.json(`${url}/tallest_women.json`)\n    ]).then((datasets)=>{\n      vis.menData = datasets[0]\n      vis.womenData = datasets[1]\n      vis.update('men')\n      // const [men, women] = datasets;\n      // let flag = true\n\n      // vis.data = women\n      // vis.update()\n\n      // d3.interval(() => {\n      //   vis.data = flag ? men : women\n      //   vis.update()\n      //   flag =! flag\n      // },1000)\n    })\n  }\n\n  update(gender) {\n    const vis = this;\n\n    vis.data = (gender === \"men\")? vis.menData : vis.womenData; \n    vis.xLabel.text(`The world's tallest ${gender}`)\n\n    const y = d3.scaleLinear()\n      .domain([\n        d3.min(vis.data, d => d.height) * 0.95,\n        d3.max(vis.data, d => d.height)\n      ])\n      .range([HEIGHT, 0])\n\n    const x = d3.scaleBand()\n      .domain(vis.data.map(d => d.name))\n      .range([0, WIDTH])\n      .padding(0.4)\n\n    const xAxisCall = d3.axisBottom(x)\n    vis.xAxisGroup.call(xAxisCall)\n\n    const yAxisCall = d3.axisLeft(y)\n    vis.yAxisGroup.transition().duration(500).call(yAxisCall)\n\n    // Data join\n    const rects = vis.svg.selectAll('rect')\n    .data(vis.data)\n\n    // Exit\n    rects.exit()\n      .transition().duration(500)\n        .attr('height',0)\n        .attr('y',HEIGHT)\n        .remove()\n\n    //Update\n    rects.transition().duration(500)\n    .attr('x', d => x(d.name))\n    .attr('y', d => y(d.height))\n    .attr('width', x.bandwidth)\n    .attr('height', d => HEIGHT - y(d.height))\n      \n    // Enter\n    rects.enter().append('rect')\n     .attr('x', d => x(d.name))\n     .attr('width', x.bandwidth)\n     .attr('fill', 'grey')\n     .attr('y', HEIGHT)\n     .transition().duration(500)\n     .attr('height', d => HEIGHT - y(d.height))\n     .attr('y', d => y(d.height))\n    \n  }\n}","import React, { Component } from 'react';\nimport D3Chart from './D3Chart';\n\nexport default class ChartWrapper extends Component {\n\tcomponentDidMount() {\n\t\tthis.setState( {\n\t\t\tchart: new D3Chart(this.refs.chart)\n\t\t})\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn false\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.state.chart.update(nextProps.gender)\n\t}\n\n\trender() {\n\t\treturn <div ref=\"chart\"></div>\n\t}\n}\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default function GenderDropdown({ genderSelected }) {\n\treturn (\n\t\t<Dropdown>\n\t\t\t<Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n\t\t\t\tPlease select gender\n\t\t\t</Dropdown.Toggle>\n\n\t\t\t<Dropdown.Menu>\n\t\t\t\t<Dropdown.Item onSelect={() => genderSelected(\"men\")}>Men</Dropdown.Item>\n\t\t\t\t<Dropdown.Item onSelect={() => genderSelected(\"women\")}>Women</Dropdown.Item>\n\t\t\t</Dropdown.Menu>\n\t\t</Dropdown>\n\t)\n}","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ChartWrapper from './ChartWrapper';\nimport GenderDropdown from './GenderDropdown';\nclass App extends Component {\n  state = {\n    gender: 'men'\n  }\n\n  genderSelected = (gender) => this.setState({ gender })\n  render(){\n    return (\n      <>\n        <Navbar bg=\"light\">\n            <Navbar.Brand>Barchartly</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col xs={12}><GenderDropdown genderSelected={this.genderSelected}/></Col>\n          </Row>\n          <Row>\n            <Col xs={12}><ChartWrapper gender={this.state.gender}/></Col>\n          </Row>\n          \n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}